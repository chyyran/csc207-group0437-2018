@startuml
left to right direction
skinparam classAttributeIconSize 0
package edu.toronto.csc207.restaurantsolution.data {
class Ingredient {
        - cost : Double
        - name : String
        - pricing : Double
        - reorderAmount : int
        - threshold : Integer
        + getCost() : Double
        + getName() : String
        + getPricing() : Double
        + getReorderAmount() : int
        + getReorderThreshold() : Integer
        + toString() : String
}
class MenuItem {
        - discount : double
        - ingredients : Map<Ingredient,Integer>
        - name : String
        - price : double
        + getIngredients() : Map<Ingredient,Integer>
        + getName() : String
        + getOriginalPrice() : double
        + getPrice() : double
        + increasePrice(double) : void
        + setDiscount(double) : void
        + setIngredients(Map<Ingredient,Integer>) : void
        + setPrice(double) : void
        + toString() : String
}
}
package edu.toronto.csc207.restaurantsolution.framework.events.eventargs {
class BillPrintEvent {
        - tableNumber : Integer
        + getTableNumber() : Integer
        + setTableNumber(Integer) : void
}
class IngredientReorderEvent {
        - ingredient : Ingredient
        + getIngredient() : Ingredient
        + setIngredient(Ingredient) : void
}
class IngredientRestockEvent {
        - ingredient : Ingredient
        + getIngredient() : Ingredient
        + setIngredient(Ingredient) : void
}
class InventoryPrintEvent {
}
class OrderChangedEvent {
        - newStatus : OrderStatus
        - orderNumber : int
        - sender : String
        + getNewStatus() : OrderStatus
        + getOrderNumber() : int
        + getSender() : String
        + setSender(String) : void
}
class OrderCreatedEvent {
        - newOrder : Order
        + getNewOrder() : Order
        + setNewOrder(Order) : void
}
}
package edu.toronto.csc207.restaurantsolution.framework.events {
class EventArgs<T> {
        - emptyEvent : boolean
        - eventClass : Class<T>
        + getEventClass() : Class<T>
}
class EventDeserializer {
        - yamlDeserializerService : YamlDeserializerService
        + deserialize(JsonParser, DeserializationContext) : EventArgs
}
class EventEmitter {
        - eventHandlers : Map<Class<?extendsEventArgs>,List<RestaurantEventHandler<?extendsEventArgs>>>
        + onEvent(T) : void
        + registerEventHandler(RestaurantEventHandler<T>, Class<T>) : void
        + removeEventHandler(RestaurantEventHandler<T>, Class<T>) : void
}
class RestaurantEventHandler {
}
}
package edu.toronto.csc207.restaurantsolution.framework.serialization {
class IngredientDeserializer {
        - ingredientListService : IngredientListService
        + deserialize(JsonParser, DeserializationContext) : Ingredient
}
class IngredientKeyDeserializer {
        - ingredientListService : IngredientListService
        + deserializeKey(String, DeserializationContext) : Object
}
class IngredientKeySerializer {
        + serialize(Ingredient, JsonGenerator, SerializerProvider) : void
}
class MenuItemDeserializer {
        - loadedMenuItems : MenuItemsListService
        + deserialize(JsonParser, DeserializationContext) : MenuItem
}
class YamlDeserializerService {
        - mapper : ObjectMapper
        + getMapper() : ObjectMapper
}
}
package edu.toronto.csc207.restaurantsolution.framework.services {
class Service {
        # logger : Logger
}
class ServiceContainer {
        - serviceInstances : Map<Class<?extendsService>,Service>
        + getInstance(Class<T>) : T
        - instantiateNewFromExistingMembers(Class<T>) : T
        + registerInstance(T) : void
}
}
package edu.toronto.csc207.restaurantsolution {
class Main {
        + main(String[]) : void
}
}
package edu.toronto.csc207.restaurantsolution.model {
class Bill {
        - orders : ArrayList<Order>
        + addOrder(Order) : void
        + getOrders() : ArrayList<Order>
}
class Chef {
        - emitter : EventEmitter
        - inventory : Inventory
        - manager : OrderManagerService
        - name : String
        - completeOrder(Order) : void
}
class Inventory {
        - emitter : EventEmitter
        - ingToReorder : ArrayList<Ingredient>
        - inventory : Map<Ingredient,Integer>
        - request : RequestEmailWriterService
        + addToInventory(Ingredient, int) : void
        + getAmountRemaining(Ingredient) : int
        + getLeftOver(Ingredient) : int
        - reOrder(Ingredient) : void
        + removeFromInventory(Ingredient, int) : void
        + toString() : String
}
class Order {
        - addIngredients : HashMap<Ingredient,Integer>
        - menuItem : MenuItem
        - orderNumber : int
        - removedIngredients : ArrayList<Ingredient>
        - serverName : String
        - status : OrderStatus
        - tableNumber : int
        + getMenuItem() : MenuItem
        + getOrderNumber() : int
        + getServerName() : String
        + getStatus() : OrderStatus
        + getTableNumber() : int
        + setMenuItem(MenuItem) : void
        + setStatus(OrderStatus) : void
}
class Server {
        - emitter : EventEmitter
        - inventory : Inventory
        - name : String
        - orderManager : OrderManagerService
        - paymentManager : PaymentService
        - table : Table
        + addOrder(OrderChangedEvent) : void
        - checkout() : void
        - rejectOrderItem(OrderChangedEvent) : void
        - serve() : void
        - updateIngredient(OrderChangedEvent) : void
}
class Table {
        - numCustomers : int
        - server : Server
        - tableNumber : int
        + getNumCustomers() : int
        + getServer() : Server
        + getTableNumber() : int
        + setNumCustomers(int) : void
        + setServer(Server) : void
        + setTableNumber(int) : void
}
}
package edu.toronto.csc207.restaurantsolution.services {
class EventDriverService {
        - emitter : EventEmitter
        - events : List<EventArgs>
        + run() : void
}
class IngredientListService {
        - ingredients : List<Ingredient>
        + getIngredient(String) : Ingredient
        + getIngredients() : List<Ingredient>
}
class InventoryFactoryService {
        - inventory : Inventory
        + getInventory() : Inventory
}
class KitchenFactoryService {
        - eventEmitter : EventEmitter
        - inventoryFactoryService : InventoryFactoryService
        - orderManagerService : OrderManagerService
        - paymentService : PaymentService
        + createChef(String) : Chef
        + createServer(String, Table) : Server
}
class LoggingOutputService {
        - inventory : InventoryFactoryService
        - printEvent(IngredientReorderEvent) : void
        - printEvent(IngredientRestockEvent) : void
        - printEvent(InventoryPrintEvent) : void
        - printEvent(OrderChangedEvent) : void
        - printEvent(OrderCreatedEvent) : void
}
class MenuItemsListService {
        - menuitems : List<MenuItem>
        + getMenuItem(String) : MenuItem
        + getMenuItems() : List<MenuItem>
}

class OrderManagerService {
        - emitter : EventEmitter
        - orders : Map<Integer,Order>
        + createOrder(int, String, MenuItem) : Order
        + getAllOrders() : Collection<Order>
        + getOrder(int) : Order
        + getOrdersForTableNumber(int) : List<Order>
        + notifyOrderStatusChanged(int, OrderStatus, String) : void
        - saveOrder(OrderCreatedEvent) : void
        - updateOrder(OrderChangedEvent) : void
}
class PaymentService {
        - billsByTable : HashMap<Table,Bill>
        - orderManagerService : OrderManagerService
        + getBill(Table) : Bill
        + printBill(Table) : String
        + registerOrder(Table, Order) : boolean
        + registerTable(Table) : boolean
        + unregisterTable(Table) : void
}
class RequestEmailWriterService {
        - writeToFile(String, String, boolean) : void
        + write(Ingredient) : void
}
class ResourceResolverService {
        + getResource(String) : InputStream
}
}

EventArgs <|-- BillPrintEvent
EventArgs <|-- IngredientReorderEvent
EventArgs <|-- IngredientRestockEvent
EventArgs <|-- InventoryPrintEvent
EventArgs <|-- OrderChangedEvent
EventArgs <|-- OrderCreatedEvent
StdDeserializer <|-- EventDeserializer
Service <|-- EventEmitter
StdDeserializer <|-- IngredientDeserializer
KeyDeserializer <|-- IngredientKeyDeserializer
StdSerializer <|-- IngredientKeySerializer
StdDeserializer <|-- MenuItemDeserializer
Service <|-- YamlDeserializerService
Service <|-- Server
Service <|-- EventDriverService
Service <|-- IngredientListService
Service <|-- InventoryFactoryService
Service <|-- KitchenFactoryService
Service <|-- LoggingOutputService
Service <|-- MenuItemsListService
Service <|-- OrderManagerService
Service <|-- PaymentService
Service <|-- RequestEmailWriterService
Service <|-- ResourceResolverService
Serializable <|.. Ingredient
Runnable <|.. EventDriverService
Chef --> "1" EventEmitter
Ingredient "1" <-- IngredientRestockEvent
Inventory "1" <-- InventoryFactoryService
IngredientKeyDeserializer --> "1" IngredientListService
Ingredient "*" <-- Order
MenuItem "1" <-- Order
KitchenFactoryService --> "1" PaymentService
EventDeserializer --> "1" YamlDeserializerService
Order "1" <-- OrderCreatedEvent
EventEmitter "1" <-- KitchenFactoryService
Ingredient "*" <-- IngredientListService
ObjectMapper "1" <-- YamlDeserializerService
Chef --> "1" Inventory
Order --> "1" OrderStatus
Ingredient "1" <-- IngredientReorderEvent
Bill --> "*" Order
Class "1" <-- EventArgs
Bill "*" <-- PaymentService
EventDriverService --> "1" EventEmitter
Logger "1" <-- Service
EventArgs "*" <-- EventEmitter
Order "*" <-- OrderManagerService
InventoryFactoryService "1" <-- KitchenFactoryService
Inventory "1" <-- Server
Chef --> "1" OrderManagerService
PaymentService "1" <-- Server
EventEmitter "1" <-- Server
EventEmitter "1" <-- OrderManagerService
IngredientDeserializer --> "1" IngredientListService
Server "1" -- "1" Table
InventoryFactoryService "1" <-- LoggingOutputService
Service "*" <-- ServiceContainer
EventEmitter "1" <-- Inventory
OrderManagerService "1" <-- Server
Inventory --> "1" RequestEmailWriterService
OrderChangedEvent --> "1" OrderStatus
MenuItemDeserializer --> "1" MenuItemsListService
EventArgs "*" <-- EventDriverService
Ingredient "*" <-- Inventory
KitchenFactoryService --> "1" OrderManagerService
OrderManagerService "1" <-- PaymentService
@enduml